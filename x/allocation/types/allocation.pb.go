// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: allocation/v1/allocation.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_tendermint_tendermint_libs_bytes "github.com/tendermint/tendermint/libs/bytes"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AllocationPrecommit defines an array of hashed data to be used for the precommit phase
// of allocation
type AllocationPrecommit struct {
	Hash     github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,1,opt,name=hash,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"hash,omitempty"`
	CellarId string                                               `protobuf:"bytes,2,opt,name=cellar_id,json=cellarId,proto3" json:"cellar_id,omitempty"`
}

func (m *AllocationPrecommit) Reset()         { *m = AllocationPrecommit{} }
func (m *AllocationPrecommit) String() string { return proto.CompactTextString(m) }
func (*AllocationPrecommit) ProtoMessage()    {}
func (*AllocationPrecommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d2c35dae4a6cad, []int{0}
}
func (m *AllocationPrecommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocationPrecommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocationPrecommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocationPrecommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationPrecommit.Merge(m, src)
}
func (m *AllocationPrecommit) XXX_Size() int {
	return m.Size()
}
func (m *AllocationPrecommit) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationPrecommit.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationPrecommit proto.InternalMessageInfo

func (m *AllocationPrecommit) GetHash() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *AllocationPrecommit) GetCellarId() string {
	if m != nil {
		return m.CellarId
	}
	return ""
}

// Allocation is the commit for all allocations for a cellar by a validator
type Allocation struct {
	CellarId        string           `protobuf:"bytes,1,opt,name=cellar_id,json=cellarId,proto3" json:"cellar_id,omitempty"`
	PoolAllocations *PoolAllocations `protobuf:"bytes,2,opt,name=pool_allocations,json=poolAllocations,proto3" json:"pool_allocations,omitempty"`
	Salt            string           `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *Allocation) Reset()         { *m = Allocation{} }
func (m *Allocation) String() string { return proto.CompactTextString(m) }
func (*Allocation) ProtoMessage()    {}
func (*Allocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d2c35dae4a6cad, []int{1}
}
func (m *Allocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Allocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Allocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Allocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Allocation.Merge(m, src)
}
func (m *Allocation) XXX_Size() int {
	return m.Size()
}
func (m *Allocation) XXX_DiscardUnknown() {
	xxx_messageInfo_Allocation.DiscardUnknown(m)
}

var xxx_messageInfo_Allocation proto.InternalMessageInfo

func (m *Allocation) GetCellarId() string {
	if m != nil {
		return m.CellarId
	}
	return ""
}

func (m *Allocation) GetPoolAllocations() *PoolAllocations {
	if m != nil {
		return m.PoolAllocations
	}
	return nil
}

func (m *Allocation) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

// PoolAllocation is the allocation of weights within a fee level on a cellar
type PoolAllocation struct {
	FeeLevel    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=fee_level,json=feeLevel,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"feeLevel" yaml:"feeLevel"`
	TickWeights *TickWeights                           `protobuf:"bytes,2,opt,name=tick_weights,json=tickWeights,proto3" json:"tick_weights,omitempty"`
}

func (m *PoolAllocation) Reset()         { *m = PoolAllocation{} }
func (m *PoolAllocation) String() string { return proto.CompactTextString(m) }
func (*PoolAllocation) ProtoMessage()    {}
func (*PoolAllocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d2c35dae4a6cad, []int{2}
}
func (m *PoolAllocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolAllocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolAllocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolAllocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolAllocation.Merge(m, src)
}
func (m *PoolAllocation) XXX_Size() int {
	return m.Size()
}
func (m *PoolAllocation) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolAllocation.DiscardUnknown(m)
}

var xxx_messageInfo_PoolAllocation proto.InternalMessageInfo

func (m *PoolAllocation) GetTickWeights() *TickWeights {
	if m != nil {
		return m.TickWeights
	}
	return nil
}

// PoolAllocations is a struct containing a collection of PoolAllocation
type PoolAllocations struct {
	Allocations []*PoolAllocation `protobuf:"bytes,1,rep,name=allocations,proto3" json:"allocations,omitempty"`
}

func (m *PoolAllocations) Reset()         { *m = PoolAllocations{} }
func (m *PoolAllocations) String() string { return proto.CompactTextString(m) }
func (*PoolAllocations) ProtoMessage()    {}
func (*PoolAllocations) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d2c35dae4a6cad, []int{3}
}
func (m *PoolAllocations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolAllocations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolAllocations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolAllocations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolAllocations.Merge(m, src)
}
func (m *PoolAllocations) XXX_Size() int {
	return m.Size()
}
func (m *PoolAllocations) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolAllocations.DiscardUnknown(m)
}

var xxx_messageInfo_PoolAllocations proto.InternalMessageInfo

func (m *PoolAllocations) GetAllocations() []*PoolAllocation {
	if m != nil {
		return m.Allocations
	}
	return nil
}

// TickWeight is the weighted Tick value
type TickWeight struct {
	Tick   uint32                                 `protobuf:"varint,1,opt,name=tick,proto3" json:"tick,omitempty"`
	Weight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight" yaml:"weight"`
}

func (m *TickWeight) Reset()         { *m = TickWeight{} }
func (m *TickWeight) String() string { return proto.CompactTextString(m) }
func (*TickWeight) ProtoMessage()    {}
func (*TickWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d2c35dae4a6cad, []int{4}
}
func (m *TickWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickWeight.Merge(m, src)
}
func (m *TickWeight) XXX_Size() int {
	return m.Size()
}
func (m *TickWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_TickWeight.DiscardUnknown(m)
}

var xxx_messageInfo_TickWeight proto.InternalMessageInfo

func (m *TickWeight) GetTick() uint32 {
	if m != nil {
		return m.Tick
	}
	return 0
}

// TickWeights is a struct for holding a collection of TickWeight
type TickWeights struct {
	Weights []*TickWeight `protobuf:"bytes,1,rep,name=weights,proto3" json:"weights,omitempty"`
}

func (m *TickWeights) Reset()         { *m = TickWeights{} }
func (m *TickWeights) String() string { return proto.CompactTextString(m) }
func (*TickWeights) ProtoMessage()    {}
func (*TickWeights) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d2c35dae4a6cad, []int{5}
}
func (m *TickWeights) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickWeights) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickWeights.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickWeights) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickWeights.Merge(m, src)
}
func (m *TickWeights) XXX_Size() int {
	return m.Size()
}
func (m *TickWeights) XXX_DiscardUnknown() {
	xxx_messageInfo_TickWeights.DiscardUnknown(m)
}

var xxx_messageInfo_TickWeights proto.InternalMessageInfo

func (m *TickWeights) GetWeights() []*TickWeight {
	if m != nil {
		return m.Weights
	}
	return nil
}

// Cellar is a collection of pools for a token pair
type Cellar struct {
	CellarId string  `protobuf:"bytes,1,opt,name=cellar_id,json=cellarId,proto3" json:"cellar_id,omitempty"`
	Pool     []*Pool `protobuf:"bytes,2,rep,name=pool,proto3" json:"pool,omitempty"`
}

func (m *Cellar) Reset()         { *m = Cellar{} }
func (m *Cellar) String() string { return proto.CompactTextString(m) }
func (*Cellar) ProtoMessage()    {}
func (*Cellar) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d2c35dae4a6cad, []int{6}
}
func (m *Cellar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cellar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cellar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cellar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cellar.Merge(m, src)
}
func (m *Cellar) XXX_Size() int {
	return m.Size()
}
func (m *Cellar) XXX_DiscardUnknown() {
	xxx_messageInfo_Cellar.DiscardUnknown(m)
}

var xxx_messageInfo_Cellar proto.InternalMessageInfo

func (m *Cellar) GetCellarId() string {
	if m != nil {
		return m.CellarId
	}
	return ""
}

func (m *Cellar) GetPool() []*Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

// Pool collects tick information
type Pool struct {
	FeeLevel   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=fee_level,json=feeLevel,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"feeLevel" yaml:"feeLevel"`
	TickRanges []uint32                               `protobuf:"varint,2,rep,packed,name=tick_ranges,json=tickRanges,proto3" json:"tick_ranges,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d2c35dae4a6cad, []int{7}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetTickRanges() []uint32 {
	if m != nil {
		return m.TickRanges
	}
	return nil
}

func init() {
	proto.RegisterType((*AllocationPrecommit)(nil), "allocation.v1.AllocationPrecommit")
	proto.RegisterType((*Allocation)(nil), "allocation.v1.Allocation")
	proto.RegisterType((*PoolAllocation)(nil), "allocation.v1.PoolAllocation")
	proto.RegisterType((*PoolAllocations)(nil), "allocation.v1.PoolAllocations")
	proto.RegisterType((*TickWeight)(nil), "allocation.v1.TickWeight")
	proto.RegisterType((*TickWeights)(nil), "allocation.v1.TickWeights")
	proto.RegisterType((*Cellar)(nil), "allocation.v1.Cellar")
	proto.RegisterType((*Pool)(nil), "allocation.v1.Pool")
}

func init() { proto.RegisterFile("allocation/v1/allocation.proto", fileDescriptor_23d2c35dae4a6cad) }

var fileDescriptor_23d2c35dae4a6cad = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xce, 0xb5, 0x51, 0x69, 0x5e, 0x1a, 0x82, 0xae, 0x0c, 0xa1, 0x08, 0x3b, 0xba, 0x01, 0xb2,
	0x60, 0xab, 0x2d, 0x03, 0x42, 0x42, 0x08, 0xc3, 0x40, 0xa4, 0x82, 0xaa, 0x13, 0x12, 0x12, 0x4b,
	0xe4, 0x38, 0x57, 0xc7, 0xcd, 0x39, 0x17, 0xf9, 0x8e, 0xd0, 0x6c, 0x48, 0x2c, 0x8c, 0x48, 0xfc,
	0x1c, 0xfe, 0x40, 0xc7, 0x8e, 0x88, 0xc1, 0x42, 0xc9, 0xc6, 0xd8, 0x91, 0x09, 0xf9, 0x2e, 0xa9,
	0xed, 0x0a, 0x2a, 0xb1, 0x30, 0xf9, 0xbd, 0x77, 0xdf, 0xbd, 0xf7, 0x7d, 0x9f, 0x9f, 0x0e, 0x2c,
	0x9f, 0x73, 0x11, 0xf8, 0x2a, 0x12, 0x63, 0x77, 0xba, 0xeb, 0xe6, 0x99, 0x33, 0x49, 0x84, 0x12,
	0xb8, 0x51, 0xa8, 0x4c, 0x77, 0x77, 0x6e, 0x86, 0x22, 0x14, 0xfa, 0xc4, 0xcd, 0x22, 0x03, 0x22,
	0x1f, 0x10, 0x6c, 0x3f, 0xbd, 0xc0, 0x1d, 0x26, 0x2c, 0x10, 0x71, 0x1c, 0x29, 0x7c, 0x00, 0xd5,
	0xa1, 0x2f, 0x87, 0x2d, 0xd4, 0x46, 0x9d, 0x2d, 0xef, 0xe1, 0xaf, 0xd4, 0x7e, 0x10, 0x46, 0x6a,
	0xf8, 0xae, 0xef, 0x04, 0x22, 0x76, 0x15, 0x1b, 0x0f, 0x58, 0x12, 0x47, 0x63, 0x55, 0x0c, 0x79,
	0xd4, 0x97, 0x6e, 0x7f, 0xa6, 0x98, 0x74, 0x5e, 0xb0, 0x13, 0x2f, 0x0b, 0xa8, 0xee, 0x82, 0x6f,
	0x43, 0x2d, 0x60, 0x9c, 0xfb, 0x49, 0x2f, 0x1a, 0xb4, 0xd6, 0xda, 0xa8, 0x53, 0xa3, 0x9b, 0xa6,
	0xd0, 0x1d, 0x90, 0x4f, 0x08, 0x20, 0xa7, 0x50, 0xc6, 0xa2, 0x32, 0x16, 0x77, 0xe1, 0xc6, 0x44,
	0x08, 0xde, 0xcb, 0xa5, 0x49, 0xdd, 0xaf, 0xbe, 0x67, 0x39, 0x25, 0xb9, 0xce, 0xa1, 0x10, 0x3c,
	0xef, 0x2a, 0x69, 0x73, 0x52, 0x2e, 0x60, 0x0c, 0x55, 0xe9, 0x73, 0xd5, 0x5a, 0xd7, 0x23, 0x74,
	0x4c, 0xbe, 0x22, 0xb8, 0x5e, 0xbe, 0x88, 0x8f, 0xa1, 0x76, 0xc4, 0x58, 0x8f, 0xb3, 0x29, 0xe3,
	0x86, 0x8e, 0xf7, 0xf2, 0x34, 0xb5, 0x2b, 0xdf, 0x53, 0xfb, 0x6e, 0xc1, 0x91, 0x40, 0xc8, 0x58,
	0xc8, 0xe5, 0xe7, 0xbe, 0x1c, 0x8c, 0x5c, 0x35, 0x9b, 0x30, 0xe9, 0x3c, 0x67, 0xc1, 0xcf, 0xd4,
	0xde, 0x3c, 0x62, 0xec, 0x20, 0xeb, 0x70, 0x9e, 0xda, 0xcd, 0x99, 0x1f, 0xf3, 0x47, 0x64, 0x55,
	0x21, 0xf4, 0xe2, 0x10, 0x3f, 0x86, 0x2d, 0x15, 0x05, 0xa3, 0xde, 0x7b, 0x16, 0x85, 0x43, 0xb5,
	0x52, 0xb6, 0x73, 0x49, 0xd9, 0xeb, 0x28, 0x18, 0xbd, 0x31, 0x08, 0x5a, 0x57, 0x79, 0x42, 0x28,
	0x34, 0x2f, 0xa9, 0xc6, 0x4f, 0xa0, 0x5e, 0xb4, 0x0a, 0xb5, 0xd7, 0x3b, 0xf5, 0xbd, 0x3b, 0x57,
	0x5a, 0x45, 0x8b, 0x37, 0xc8, 0x47, 0x04, 0x90, 0x0f, 0xcc, 0x4c, 0xcb, 0x26, 0x6a, 0x23, 0x1a,
	0x54, 0xc7, 0xd8, 0x87, 0x0d, 0x43, 0xd8, 0xfc, 0x59, 0xaf, 0xfb, 0xcf, 0xf6, 0x2c, 0xef, 0x9f,
	0xa7, 0x76, 0xc3, 0x98, 0x63, 0x72, 0x42, 0x97, 0x07, 0xc4, 0x83, 0x7a, 0x41, 0x35, 0xde, 0x87,
	0x6b, 0x2b, 0x8b, 0x8c, 0xa2, 0x5b, 0x7f, 0xb5, 0x88, 0xae, 0x90, 0xe4, 0x15, 0x6c, 0x3c, 0xd3,
	0x6b, 0x74, 0xf5, 0x86, 0xdd, 0x83, 0x6a, 0xb6, 0x29, 0xad, 0x35, 0xdd, 0x78, 0xfb, 0x0f, 0x56,
	0x51, 0x0d, 0x20, 0x5f, 0x10, 0x54, 0xb3, 0xf4, 0xbf, 0x6e, 0x88, 0x0d, 0xfa, 0x8f, 0xf7, 0x12,
	0x7f, 0x1c, 0x32, 0xa9, 0x49, 0x36, 0x28, 0x64, 0x25, 0xaa, 0x2b, 0x5e, 0xf7, 0x74, 0x6e, 0xa1,
	0xb3, 0xb9, 0x85, 0x7e, 0xcc, 0x2d, 0xf4, 0x79, 0x61, 0x55, 0xce, 0x16, 0x56, 0xe5, 0xdb, 0xc2,
	0xaa, 0xbc, 0x75, 0x0b, 0x5c, 0x26, 0x2c, 0x0c, 0x67, 0xc7, 0x53, 0x57, 0x8a, 0x38, 0x66, 0x3c,
	0x62, 0x89, 0x7b, 0x52, 0x78, 0x3f, 0x0c, 0xb1, 0xfe, 0x86, 0x7e, 0x21, 0xf6, 0x7f, 0x07, 0x00,
	0x00, 0xff, 0xff, 0xfc, 0x2a, 0x49, 0x33, 0x68, 0x04, 0x00, 0x00,
}

func (m *AllocationPrecommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocationPrecommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocationPrecommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CellarId) > 0 {
		i -= len(m.CellarId)
		copy(dAtA[i:], m.CellarId)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.CellarId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Allocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Allocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Allocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolAllocations != nil {
		{
			size, err := m.PoolAllocations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAllocation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CellarId) > 0 {
		i -= len(m.CellarId)
		copy(dAtA[i:], m.CellarId)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.CellarId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolAllocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolAllocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolAllocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TickWeights != nil {
		{
			size, err := m.TickWeights.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAllocation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.FeeLevel.Size()
		i -= size
		if _, err := m.FeeLevel.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAllocation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PoolAllocations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolAllocations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolAllocations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Allocations) > 0 {
		for iNdEx := len(m.Allocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Allocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAllocation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TickWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAllocation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Tick != 0 {
		i = encodeVarintAllocation(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TickWeights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickWeights) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickWeights) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Weights) > 0 {
		for iNdEx := len(m.Weights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Weights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAllocation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Cellar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cellar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cellar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pool) > 0 {
		for iNdEx := len(m.Pool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAllocation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CellarId) > 0 {
		i -= len(m.CellarId)
		copy(dAtA[i:], m.CellarId)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.CellarId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TickRanges) > 0 {
		dAtA4 := make([]byte, len(m.TickRanges)*10)
		var j3 int
		for _, num := range m.TickRanges {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintAllocation(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.FeeLevel.Size()
		i -= size
		if _, err := m.FeeLevel.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAllocation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintAllocation(dAtA []byte, offset int, v uint64) int {
	offset -= sovAllocation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllocationPrecommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	l = len(m.CellarId)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	return n
}

func (m *Allocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CellarId)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	if m.PoolAllocations != nil {
		l = m.PoolAllocations.Size()
		n += 1 + l + sovAllocation(uint64(l))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	return n
}

func (m *PoolAllocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeLevel.Size()
	n += 1 + l + sovAllocation(uint64(l))
	if m.TickWeights != nil {
		l = m.TickWeights.Size()
		n += 1 + l + sovAllocation(uint64(l))
	}
	return n
}

func (m *PoolAllocations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Allocations) > 0 {
		for _, e := range m.Allocations {
			l = e.Size()
			n += 1 + l + sovAllocation(uint64(l))
		}
	}
	return n
}

func (m *TickWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tick != 0 {
		n += 1 + sovAllocation(uint64(m.Tick))
	}
	l = m.Weight.Size()
	n += 1 + l + sovAllocation(uint64(l))
	return n
}

func (m *TickWeights) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Weights) > 0 {
		for _, e := range m.Weights {
			l = e.Size()
			n += 1 + l + sovAllocation(uint64(l))
		}
	}
	return n
}

func (m *Cellar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CellarId)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	if len(m.Pool) > 0 {
		for _, e := range m.Pool {
			l = e.Size()
			n += 1 + l + sovAllocation(uint64(l))
		}
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeLevel.Size()
	n += 1 + l + sovAllocation(uint64(l))
	if len(m.TickRanges) > 0 {
		l = 0
		for _, e := range m.TickRanges {
			l += sovAllocation(uint64(e))
		}
		n += 1 + sovAllocation(uint64(l)) + l
	}
	return n
}

func sovAllocation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAllocation(x uint64) (n int) {
	return sovAllocation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllocationPrecommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocationPrecommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocationPrecommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellarId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Allocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Allocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Allocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellarId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAllocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolAllocations == nil {
				m.PoolAllocations = &PoolAllocations{}
			}
			if err := m.PoolAllocations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolAllocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolAllocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolAllocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeLevel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TickWeights == nil {
				m.TickWeights = &TickWeights{}
			}
			if err := m.TickWeights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolAllocations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolAllocations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolAllocations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allocations = append(m.Allocations, &PoolAllocation{})
			if err := m.Allocations[len(m.Allocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TickWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TickWeights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickWeights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickWeights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weights = append(m.Weights, &TickWeight{})
			if err := m.Weights[len(m.Weights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cellar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cellar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cellar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellarId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = append(m.Pool, &Pool{})
			if err := m.Pool[len(m.Pool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeLevel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAllocation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TickRanges = append(m.TickRanges, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAllocation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAllocation
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAllocation
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TickRanges) == 0 {
					m.TickRanges = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAllocation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TickRanges = append(m.TickRanges, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TickRanges", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAllocation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAllocation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAllocation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAllocation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAllocation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAllocation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAllocation = fmt.Errorf("proto: unexpected end of group")
)
