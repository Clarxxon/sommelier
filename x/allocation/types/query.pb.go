// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: allocation/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params gRPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27a95d8c59345b2, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsRequest is the response type for the Query/Params gRPC method.
type QueryParamsResponse struct {
	// allocation parameters
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27a95d8c59345b2, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryDelegateAddressRequest is the request type for the Query/QueryDelegateAddress gRPC method.
type QueryDelegateAddressRequest struct {
	// validator operator address
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryDelegateAddressRequest) Reset()         { *m = QueryDelegateAddressRequest{} }
func (m *QueryDelegateAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateAddressRequest) ProtoMessage()    {}
func (*QueryDelegateAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27a95d8c59345b2, []int{2}
}
func (m *QueryDelegateAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateAddressRequest.Merge(m, src)
}
func (m *QueryDelegateAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateAddressRequest proto.InternalMessageInfo

func (m *QueryDelegateAddressRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

// QueryDelegateAddressResponse is the response type for the Query/QueryDelegateAddress gRPC method.
type QueryDelegateAddressResponse struct {
	// delegate account address
	Delegate string `protobuf:"bytes,2,opt,name=delegate,proto3" json:"delegate,omitempty"`
}

func (m *QueryDelegateAddressResponse) Reset()         { *m = QueryDelegateAddressResponse{} }
func (m *QueryDelegateAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateAddressResponse) ProtoMessage()    {}
func (*QueryDelegateAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27a95d8c59345b2, []int{3}
}
func (m *QueryDelegateAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateAddressResponse.Merge(m, src)
}
func (m *QueryDelegateAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateAddressResponse proto.InternalMessageInfo

func (m *QueryDelegateAddressResponse) GetDelegate() string {
	if m != nil {
		return m.Delegate
	}
	return ""
}

// QueryValidatorAddressRequest is the request type for the Query/Params gRPC method.
type QueryValidatorAddressRequest struct {
	// delegate account address
	Delegate string `protobuf:"bytes,1,opt,name=delegate,proto3" json:"delegate,omitempty"`
}

func (m *QueryValidatorAddressRequest) Reset()         { *m = QueryValidatorAddressRequest{} }
func (m *QueryValidatorAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorAddressRequest) ProtoMessage()    {}
func (*QueryValidatorAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27a95d8c59345b2, []int{4}
}
func (m *QueryValidatorAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorAddressRequest.Merge(m, src)
}
func (m *QueryValidatorAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorAddressRequest proto.InternalMessageInfo

func (m *QueryValidatorAddressRequest) GetDelegate() string {
	if m != nil {
		return m.Delegate
	}
	return ""
}

// QueryValidatorAddressResponse is the response type for the Query/Params gRPC method.
type QueryValidatorAddressResponse struct {
	// validator operator address
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryValidatorAddressResponse) Reset()         { *m = QueryValidatorAddressResponse{} }
func (m *QueryValidatorAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorAddressResponse) ProtoMessage()    {}
func (*QueryValidatorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27a95d8c59345b2, []int{5}
}
func (m *QueryValidatorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorAddressResponse.Merge(m, src)
}
func (m *QueryValidatorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorAddressResponse proto.InternalMessageInfo

func (m *QueryValidatorAddressResponse) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

// QueryAllocationPrecommitRequest is the request type for the Query/AllocationPrecommit gRPC method.
type QueryAllocationPrecommitRequest struct {
	// validator operator address
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	// cellar contract address
	Cellar string `protobuf:"bytes,2,opt,name=cellar,proto3" json:"cellar,omitempty"`
}

func (m *QueryAllocationPrecommitRequest) Reset()         { *m = QueryAllocationPrecommitRequest{} }
func (m *QueryAllocationPrecommitRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllocationPrecommitRequest) ProtoMessage()    {}
func (*QueryAllocationPrecommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27a95d8c59345b2, []int{6}
}
func (m *QueryAllocationPrecommitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllocationPrecommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllocationPrecommitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllocationPrecommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllocationPrecommitRequest.Merge(m, src)
}
func (m *QueryAllocationPrecommitRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllocationPrecommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllocationPrecommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllocationPrecommitRequest proto.InternalMessageInfo

func (m *QueryAllocationPrecommitRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *QueryAllocationPrecommitRequest) GetCellar() string {
	if m != nil {
		return m.Cellar
	}
	return ""
}

// QueryAllocationPrecommitResponse is the response type for the Query/QueryallocationDataPrevote gRPC method.
type QueryAllocationPrecommitResponse struct {
	// prevote submitted within the latest voting period
	Precommit *AllocationPrecommit `protobuf:"bytes,1,opt,name=precommit,proto3" json:"precommit,omitempty"`
}

func (m *QueryAllocationPrecommitResponse) Reset()         { *m = QueryAllocationPrecommitResponse{} }
func (m *QueryAllocationPrecommitResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllocationPrecommitResponse) ProtoMessage()    {}
func (*QueryAllocationPrecommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27a95d8c59345b2, []int{7}
}
func (m *QueryAllocationPrecommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllocationPrecommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllocationPrecommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllocationPrecommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllocationPrecommitResponse.Merge(m, src)
}
func (m *QueryAllocationPrecommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllocationPrecommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllocationPrecommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllocationPrecommitResponse proto.InternalMessageInfo

func (m *QueryAllocationPrecommitResponse) GetPrecommit() *AllocationPrecommit {
	if m != nil {
		return m.Precommit
	}
	return nil
}

// QueryAllocationCommitRequest is the request type for the Query/QueryallocationDataVote gRPC method.
type QueryAllocationCommitRequest struct {
	// validator operator address
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	// cellar contract address
	Cellar string `protobuf:"bytes,2,opt,name=cellar,proto3" json:"cellar,omitempty"`
}

func (m *QueryAllocationCommitRequest) Reset()         { *m = QueryAllocationCommitRequest{} }
func (m *QueryAllocationCommitRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllocationCommitRequest) ProtoMessage()    {}
func (*QueryAllocationCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27a95d8c59345b2, []int{8}
}
func (m *QueryAllocationCommitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllocationCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllocationCommitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllocationCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllocationCommitRequest.Merge(m, src)
}
func (m *QueryAllocationCommitRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllocationCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllocationCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllocationCommitRequest proto.InternalMessageInfo

func (m *QueryAllocationCommitRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *QueryAllocationCommitRequest) GetCellar() string {
	if m != nil {
		return m.Cellar
	}
	return ""
}

// QueryAllocationCommitResponse is the response type for the Query/QueryallocationDataVote gRPC method.
type QueryAllocationCommitResponse struct {
	// vote containing the allocation feed submitted within the latest voting period
	Commit *Allocation `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (m *QueryAllocationCommitResponse) Reset()         { *m = QueryAllocationCommitResponse{} }
func (m *QueryAllocationCommitResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllocationCommitResponse) ProtoMessage()    {}
func (*QueryAllocationCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27a95d8c59345b2, []int{9}
}
func (m *QueryAllocationCommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllocationCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllocationCommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllocationCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllocationCommitResponse.Merge(m, src)
}
func (m *QueryAllocationCommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllocationCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllocationCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllocationCommitResponse proto.InternalMessageInfo

func (m *QueryAllocationCommitResponse) GetCommit() *Allocation {
	if m != nil {
		return m.Commit
	}
	return nil
}

// QueryCommitPeriodRequest is the request type for the Query/VotePeriod gRPC method.
type QueryCommitPeriodRequest struct {
}

func (m *QueryCommitPeriodRequest) Reset()         { *m = QueryCommitPeriodRequest{} }
func (m *QueryCommitPeriodRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCommitPeriodRequest) ProtoMessage()    {}
func (*QueryCommitPeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27a95d8c59345b2, []int{10}
}
func (m *QueryCommitPeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommitPeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommitPeriodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommitPeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommitPeriodRequest.Merge(m, src)
}
func (m *QueryCommitPeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommitPeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommitPeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommitPeriodRequest proto.InternalMessageInfo

// QueryCommitPeriodResponse is the response type for the Query/VotePeriod gRPC method.
type QueryCommitPeriodResponse struct {
	// block height at which the query was processed
	CurrentHeight int64 `protobuf:"varint,1,opt,name=current_height,json=currentHeight,proto3" json:"current_height,omitempty"`
	// latest vote period start block height
	VotePeriodStart int64 `protobuf:"varint,2,opt,name=vote_period_start,json=votePeriodStart,proto3" json:"vote_period_start,omitempty"`
	// block height at which the current voting period ends
	VotePeriodEnd int64 `protobuf:"varint,3,opt,name=vote_period_end,json=votePeriodEnd,proto3" json:"vote_period_end,omitempty"`
}

func (m *QueryCommitPeriodResponse) Reset()         { *m = QueryCommitPeriodResponse{} }
func (m *QueryCommitPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCommitPeriodResponse) ProtoMessage()    {}
func (*QueryCommitPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b27a95d8c59345b2, []int{11}
}
func (m *QueryCommitPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommitPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommitPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommitPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommitPeriodResponse.Merge(m, src)
}
func (m *QueryCommitPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommitPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommitPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommitPeriodResponse proto.InternalMessageInfo

func (m *QueryCommitPeriodResponse) GetCurrentHeight() int64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *QueryCommitPeriodResponse) GetVotePeriodStart() int64 {
	if m != nil {
		return m.VotePeriodStart
	}
	return 0
}

func (m *QueryCommitPeriodResponse) GetVotePeriodEnd() int64 {
	if m != nil {
		return m.VotePeriodEnd
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "allocation.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "allocation.v1.QueryParamsResponse")
	proto.RegisterType((*QueryDelegateAddressRequest)(nil), "allocation.v1.QueryDelegateAddressRequest")
	proto.RegisterType((*QueryDelegateAddressResponse)(nil), "allocation.v1.QueryDelegateAddressResponse")
	proto.RegisterType((*QueryValidatorAddressRequest)(nil), "allocation.v1.QueryValidatorAddressRequest")
	proto.RegisterType((*QueryValidatorAddressResponse)(nil), "allocation.v1.QueryValidatorAddressResponse")
	proto.RegisterType((*QueryAllocationPrecommitRequest)(nil), "allocation.v1.QueryAllocationPrecommitRequest")
	proto.RegisterType((*QueryAllocationPrecommitResponse)(nil), "allocation.v1.QueryAllocationPrecommitResponse")
	proto.RegisterType((*QueryAllocationCommitRequest)(nil), "allocation.v1.QueryAllocationCommitRequest")
	proto.RegisterType((*QueryAllocationCommitResponse)(nil), "allocation.v1.QueryAllocationCommitResponse")
	proto.RegisterType((*QueryCommitPeriodRequest)(nil), "allocation.v1.QueryCommitPeriodRequest")
	proto.RegisterType((*QueryCommitPeriodResponse)(nil), "allocation.v1.QueryCommitPeriodResponse")
}

func init() { proto.RegisterFile("allocation/v1/query.proto", fileDescriptor_b27a95d8c59345b2) }

var fileDescriptor_b27a95d8c59345b2 = []byte{
	// 726 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xd1, 0x4e, 0x13, 0x4d,
	0x14, 0xee, 0xc2, 0xff, 0x57, 0x19, 0x82, 0x84, 0x11, 0x4c, 0xbb, 0x60, 0x81, 0x4d, 0x04, 0x82,
	0x64, 0xc7, 0x82, 0xd1, 0x44, 0x63, 0x22, 0xa8, 0x89, 0x7a, 0x85, 0xab, 0xd1, 0xc4, 0x9b, 0x66,
	0xda, 0x9d, 0x2c, 0x6b, 0x76, 0x77, 0x96, 0x9d, 0x69, 0x23, 0x21, 0xdc, 0xf8, 0x04, 0x26, 0x26,
	0xbc, 0x82, 0xc6, 0x6b, 0x1f, 0x82, 0x4b, 0x12, 0x6f, 0xb8, 0x32, 0x06, 0x7c, 0x10, 0xd3, 0x99,
	0xd9, 0x76, 0xb7, 0xcc, 0x42, 0x2f, 0xbc, 0xeb, 0x9c, 0xf3, 0x9d, 0xef, 0x7c, 0xe7, 0xec, 0x7c,
	0x53, 0x50, 0xc5, 0x41, 0x40, 0x5b, 0x98, 0xfb, 0x34, 0x42, 0x9d, 0x3a, 0xda, 0x6d, 0x93, 0x64,
	0xcf, 0x8e, 0x13, 0xca, 0x29, 0x9c, 0xe8, 0xa7, 0xec, 0x4e, 0xdd, 0x9c, 0xf6, 0xa8, 0x47, 0x45,
	0x06, 0x75, 0x7f, 0x49, 0x90, 0x39, 0xe7, 0x51, 0xea, 0x05, 0x04, 0xe1, 0xd8, 0x47, 0x38, 0x8a,
	0x28, 0x17, 0x78, 0xa6, 0xb2, 0xb3, 0x79, 0x76, 0x8f, 0x44, 0x84, 0xf9, 0x69, 0xb2, 0x96, 0x4f,
	0x66, 0xba, 0xc9, 0x7c, 0xb5, 0x45, 0x59, 0x48, 0x59, 0x43, 0xf6, 0x94, 0x07, 0x95, 0x5a, 0x95,
	0x27, 0xd4, 0xc4, 0x8c, 0x48, 0xcd, 0xa8, 0x53, 0x6f, 0x12, 0x8e, 0xeb, 0x28, 0xc6, 0x9e, 0x1f,
	0x65, 0x68, 0xac, 0x69, 0x00, 0x5f, 0x75, 0x11, 0xdb, 0x38, 0xc1, 0x21, 0x73, 0xc8, 0x6e, 0x9b,
	0x30, 0x6e, 0xbd, 0x04, 0xd7, 0x73, 0x51, 0x16, 0xd3, 0x88, 0x11, 0xb8, 0x01, 0xca, 0xb1, 0x88,
	0x54, 0x8c, 0x05, 0x63, 0x65, 0x7c, 0x7d, 0xc6, 0xce, 0x2d, 0xc1, 0x96, 0xf0, 0xad, 0xff, 0x8e,
	0x7e, 0xcd, 0x97, 0x1c, 0x05, 0xb5, 0x1e, 0x82, 0x59, 0xc1, 0xf5, 0x94, 0x04, 0xc4, 0xc3, 0x9c,
	0x6c, 0xba, 0x6e, 0x42, 0x58, 0xda, 0x0a, 0xce, 0x81, 0xb1, 0x0e, 0x0e, 0x7c, 0x17, 0x73, 0x9a,
	0x08, 0xda, 0x31, 0xa7, 0x1f, 0xb0, 0x1e, 0x80, 0x39, 0x7d, 0xb1, 0x52, 0x64, 0x82, 0xab, 0xae,
	0x4a, 0x55, 0x46, 0x44, 0x71, 0xef, 0xdc, 0xab, 0x7d, 0x9b, 0xb2, 0x0d, 0x74, 0xce, 0xd6, 0x1a,
	0x03, 0xb5, 0x8f, 0xc0, 0xcd, 0x82, 0x5a, 0xd5, 0xf8, 0x62, 0xd9, 0xef, 0xc0, 0xbc, 0x28, 0xdf,
	0xec, 0xad, 0x67, 0x3b, 0x21, 0x2d, 0x1a, 0x86, 0x3e, 0x1f, 0x6a, 0x6e, 0x78, 0x03, 0x94, 0x5b,
	0x24, 0x08, 0x70, 0xa2, 0xa6, 0x52, 0x27, 0xcb, 0x05, 0x0b, 0xc5, 0xc4, 0x4a, 0xda, 0x63, 0x30,
	0x16, 0xa7, 0x41, 0xf5, 0xa1, 0xac, 0x81, 0x0f, 0xa5, 0x2b, 0xef, 0x17, 0x59, 0x6f, 0xd4, 0xe6,
	0xfa, 0xb0, 0x27, 0xff, 0x40, 0xbb, 0xa3, 0x76, 0x7a, 0x9e, 0x55, 0x09, 0xaf, 0x83, 0x72, 0x4e,
	0x75, 0xb5, 0x50, 0xb5, 0xa3, 0x80, 0x96, 0x09, 0x2a, 0x82, 0x53, 0x32, 0x6d, 0x93, 0xc4, 0xa7,
	0x6e, 0x7a, 0x89, 0x0f, 0x0d, 0x50, 0xd5, 0x24, 0x55, 0xb3, 0x5b, 0xe0, 0x5a, 0xab, 0x9d, 0x24,
	0x24, 0xe2, 0x8d, 0x1d, 0xe2, 0x7b, 0x3b, 0xb2, 0xe9, 0xa8, 0x33, 0xa1, 0xa2, 0xcf, 0x45, 0x10,
	0xae, 0x82, 0xa9, 0x0e, 0xe5, 0xa4, 0x11, 0x8b, 0xea, 0x06, 0xe3, 0x38, 0xe1, 0x62, 0xae, 0x51,
	0x67, 0xb2, 0x9b, 0x90, 0xac, 0xaf, 0xbb, 0x61, 0xb8, 0x04, 0x26, 0xb3, 0x58, 0x12, 0xb9, 0x95,
	0x51, 0xc9, 0xd9, 0x47, 0x3e, 0x8b, 0xdc, 0xf5, 0x93, 0x2b, 0xe0, 0x7f, 0x21, 0x0c, 0x1e, 0x80,
	0xf1, 0x8c, 0xcf, 0xe0, 0xe2, 0xc0, 0xc0, 0xe7, 0x9d, 0x69, 0x5a, 0x17, 0x41, 0xe4, 0x68, 0xd6,
	0xf2, 0xa7, 0x9f, 0x7f, 0xbe, 0x8c, 0x2c, 0xc2, 0x79, 0xc4, 0x68, 0x18, 0x92, 0xc0, 0x27, 0x09,
	0xca, 0xbf, 0x26, 0xd2, 0x9a, 0xf0, 0xab, 0x01, 0xa6, 0x75, 0xf6, 0x82, 0xab, 0xba, 0x2e, 0x7a,
	0x03, 0x9b, 0xb7, 0x87, 0xc2, 0x2a, 0x69, 0xf7, 0x84, 0xb4, 0x3b, 0xd0, 0x2e, 0x94, 0x96, 0x5a,
	0x90, 0xa1, 0xfd, 0xde, 0x95, 0x3a, 0x80, 0xdf, 0x0d, 0x30, 0xa3, 0x35, 0x24, 0xd4, 0xb6, 0x2f,
	0xb0, 0xbc, 0xb9, 0x36, 0x1c, 0x78, 0x68, 0xb1, 0x3d, 0x85, 0x0c, 0xed, 0xa7, 0xc2, 0x0f, 0xe0,
	0x0f, 0x43, 0xdd, 0x4a, 0x8d, 0xcd, 0xa0, 0xad, 0x93, 0x50, 0xfc, 0x4e, 0x98, 0x68, 0x68, 0xbc,
	0x52, 0x7d, 0x5f, 0xa8, 0xae, 0x43, 0x54, 0xfc, 0xf5, 0xd3, 0x9a, 0xfc, 0x8e, 0xbf, 0xa5, 0x3b,
	0x1e, 0x34, 0xa8, 0x7e, 0xc7, 0x05, 0x8f, 0x83, 0x7e, 0xc7, 0x45, 0x9e, 0xb7, 0xee, 0x0a, 0xb5,
	0x36, 0x5c, 0x2b, 0x54, 0xab, 0x93, 0x7a, 0x68, 0x80, 0xa9, 0x73, 0xd6, 0x86, 0xcb, 0xba, 0xce,
	0x9a, 0x97, 0xc1, 0x5c, 0xb9, 0x1c, 0xa8, 0xe4, 0xd9, 0x42, 0xde, 0x0a, 0x5c, 0xba, 0x44, 0x9e,
	0xf2, 0xfc, 0xd6, 0x8b, 0xa3, 0xd3, 0x9a, 0x71, 0x7c, 0x5a, 0x33, 0x7e, 0x9f, 0xd6, 0x8c, 0xcf,
	0x67, 0xb5, 0xd2, 0xf1, 0x59, 0xad, 0x74, 0x72, 0x56, 0x2b, 0xbd, 0x47, 0x9e, 0xcf, 0x77, 0xda,
	0x4d, 0xbb, 0x45, 0x43, 0x14, 0x13, 0xcf, 0xdb, 0xfb, 0xd0, 0xc9, 0x70, 0x7e, 0xcc, 0xb2, 0xf2,
	0xbd, 0x98, 0xb0, 0x66, 0x59, 0xfc, 0x41, 0x6f, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x59, 0xbd,
	0x3b, 0xa1, 0x84, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// QueryParams queries the allocation module parameters.
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// QueryDelegateAddress queries the delegate account address of a validator
	QueryDelegateAddress(ctx context.Context, in *QueryDelegateAddressRequest, opts ...grpc.CallOption) (*QueryDelegateAddressResponse, error)
	// QueryValidatorAddress returns the validator address of a given delegate
	QueryValidatorAddress(ctx context.Context, in *QueryValidatorAddressRequest, opts ...grpc.CallOption) (*QueryValidatorAddressResponse, error)
	// QueryAllocationPrecommit queries the validator prevote in the current voting period
	QueryAllocationPrecommit(ctx context.Context, in *QueryAllocationPrecommitRequest, opts ...grpc.CallOption) (*QueryAllocationPrecommitResponse, error)
	// QueryAllocationCommit queries the validator vote in the current voting period
	QueryAllocationCommit(ctx context.Context, in *QueryAllocationCommitRequest, opts ...grpc.CallOption) (*QueryAllocationCommitResponse, error)
	// QueryVotePeriod queries the heights for the current voting period (current, start and end)
	QueryCommitPeriod(ctx context.Context, in *QueryCommitPeriodRequest, opts ...grpc.CallOption) (*QueryCommitPeriodResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/allocation.v1.Query/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDelegateAddress(ctx context.Context, in *QueryDelegateAddressRequest, opts ...grpc.CallOption) (*QueryDelegateAddressResponse, error) {
	out := new(QueryDelegateAddressResponse)
	err := c.cc.Invoke(ctx, "/allocation.v1.Query/QueryDelegateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryValidatorAddress(ctx context.Context, in *QueryValidatorAddressRequest, opts ...grpc.CallOption) (*QueryValidatorAddressResponse, error) {
	out := new(QueryValidatorAddressResponse)
	err := c.cc.Invoke(ctx, "/allocation.v1.Query/QueryValidatorAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllocationPrecommit(ctx context.Context, in *QueryAllocationPrecommitRequest, opts ...grpc.CallOption) (*QueryAllocationPrecommitResponse, error) {
	out := new(QueryAllocationPrecommitResponse)
	err := c.cc.Invoke(ctx, "/allocation.v1.Query/QueryAllocationPrecommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllocationCommit(ctx context.Context, in *QueryAllocationCommitRequest, opts ...grpc.CallOption) (*QueryAllocationCommitResponse, error) {
	out := new(QueryAllocationCommitResponse)
	err := c.cc.Invoke(ctx, "/allocation.v1.Query/QueryAllocationCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCommitPeriod(ctx context.Context, in *QueryCommitPeriodRequest, opts ...grpc.CallOption) (*QueryCommitPeriodResponse, error) {
	out := new(QueryCommitPeriodResponse)
	err := c.cc.Invoke(ctx, "/allocation.v1.Query/QueryCommitPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// QueryParams queries the allocation module parameters.
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// QueryDelegateAddress queries the delegate account address of a validator
	QueryDelegateAddress(context.Context, *QueryDelegateAddressRequest) (*QueryDelegateAddressResponse, error)
	// QueryValidatorAddress returns the validator address of a given delegate
	QueryValidatorAddress(context.Context, *QueryValidatorAddressRequest) (*QueryValidatorAddressResponse, error)
	// QueryAllocationPrecommit queries the validator prevote in the current voting period
	QueryAllocationPrecommit(context.Context, *QueryAllocationPrecommitRequest) (*QueryAllocationPrecommitResponse, error)
	// QueryAllocationCommit queries the validator vote in the current voting period
	QueryAllocationCommit(context.Context, *QueryAllocationCommitRequest) (*QueryAllocationCommitResponse, error)
	// QueryVotePeriod queries the heights for the current voting period (current, start and end)
	QueryCommitPeriod(context.Context, *QueryCommitPeriodRequest) (*QueryCommitPeriodResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (*UnimplementedQueryServer) QueryDelegateAddress(ctx context.Context, req *QueryDelegateAddressRequest) (*QueryDelegateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDelegateAddress not implemented")
}
func (*UnimplementedQueryServer) QueryValidatorAddress(ctx context.Context, req *QueryValidatorAddressRequest) (*QueryValidatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryValidatorAddress not implemented")
}
func (*UnimplementedQueryServer) QueryAllocationPrecommit(ctx context.Context, req *QueryAllocationPrecommitRequest) (*QueryAllocationPrecommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllocationPrecommit not implemented")
}
func (*UnimplementedQueryServer) QueryAllocationCommit(ctx context.Context, req *QueryAllocationCommitRequest) (*QueryAllocationCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllocationCommit not implemented")
}
func (*UnimplementedQueryServer) QueryCommitPeriod(ctx context.Context, req *QueryCommitPeriodRequest) (*QueryCommitPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCommitPeriod not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allocation.v1.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDelegateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDelegateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allocation.v1.Query/QueryDelegateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDelegateAddress(ctx, req.(*QueryDelegateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryValidatorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryValidatorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allocation.v1.Query/QueryValidatorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryValidatorAddress(ctx, req.(*QueryValidatorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllocationPrecommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllocationPrecommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllocationPrecommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allocation.v1.Query/QueryAllocationPrecommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllocationPrecommit(ctx, req.(*QueryAllocationPrecommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllocationCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllocationCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllocationCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allocation.v1.Query/QueryAllocationCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllocationCommit(ctx, req.(*QueryAllocationCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCommitPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommitPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCommitPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allocation.v1.Query/QueryCommitPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCommitPeriod(ctx, req.(*QueryCommitPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "allocation.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryDelegateAddress",
			Handler:    _Query_QueryDelegateAddress_Handler,
		},
		{
			MethodName: "QueryValidatorAddress",
			Handler:    _Query_QueryValidatorAddress_Handler,
		},
		{
			MethodName: "QueryAllocationPrecommit",
			Handler:    _Query_QueryAllocationPrecommit_Handler,
		},
		{
			MethodName: "QueryAllocationCommit",
			Handler:    _Query_QueryAllocationCommit_Handler,
		},
		{
			MethodName: "QueryCommitPeriod",
			Handler:    _Query_QueryCommitPeriod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "allocation/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegateAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllocationPrecommitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllocationPrecommitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllocationPrecommitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cellar) > 0 {
		i -= len(m.Cellar)
		copy(dAtA[i:], m.Cellar)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Cellar)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllocationPrecommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllocationPrecommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllocationPrecommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Precommit != nil {
		{
			size, err := m.Precommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllocationCommitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllocationCommitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllocationCommitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cellar) > 0 {
		i -= len(m.Cellar)
		copy(dAtA[i:], m.Cellar)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Cellar)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllocationCommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllocationCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllocationCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Commit != nil {
		{
			size, err := m.Commit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCommitPeriodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommitPeriodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommitPeriodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCommitPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommitPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommitPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotePeriodEnd != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotePeriodEnd))
		i--
		dAtA[i] = 0x18
	}
	if m.VotePeriodStart != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotePeriodStart))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrentHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegateAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllocationPrecommitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Cellar)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllocationPrecommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Precommit != nil {
		l = m.Precommit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllocationCommitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Cellar)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllocationCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Commit != nil {
		l = m.Commit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCommitPeriodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCommitPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentHeight != 0 {
		n += 1 + sovQuery(uint64(m.CurrentHeight))
	}
	if m.VotePeriodStart != 0 {
		n += 1 + sovQuery(uint64(m.VotePeriodStart))
	}
	if m.VotePeriodEnd != 0 {
		n += 1 + sovQuery(uint64(m.VotePeriodEnd))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllocationPrecommitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllocationPrecommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllocationPrecommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cellar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cellar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllocationPrecommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllocationPrecommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllocationPrecommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Precommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Precommit == nil {
				m.Precommit = &AllocationPrecommit{}
			}
			if err := m.Precommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllocationCommitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllocationCommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllocationCommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cellar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cellar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllocationCommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllocationCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllocationCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commit == nil {
				m.Commit = &Allocation{}
			}
			if err := m.Commit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommitPeriodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommitPeriodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommitPeriodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommitPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommitPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommitPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHeight", wireType)
			}
			m.CurrentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriodStart", wireType)
			}
			m.VotePeriodStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriodStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriodEnd", wireType)
			}
			m.VotePeriodEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriodEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
