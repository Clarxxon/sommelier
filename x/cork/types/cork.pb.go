// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cork/v1/cork.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSubmitCorkRequest - sdk.Msg for submitting calls to Ethereum through the gravity bridge contract
type Cork struct {
	// call body containing the ABI encoded bytes to send to the contract
	EncodedContractCall []byte `protobuf:"bytes,1,opt,name=encoded_contract_call,json=encodedContractCall,proto3" json:"encoded_contract_call,omitempty"`
	// address of the contract to send the call
	TargetContractAddress string `protobuf:"bytes,2,opt,name=target_contract_address,json=targetContractAddress,proto3" json:"target_contract_address,omitempty"`
}

func (m *Cork) Reset()         { *m = Cork{} }
func (m *Cork) String() string { return proto.CompactTextString(m) }
func (*Cork) ProtoMessage()    {}
func (*Cork) Descriptor() ([]byte, []int) {
	return fileDescriptor_79882ab39b78d896, []int{0}
}
func (m *Cork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cork.Merge(m, src)
}
func (m *Cork) XXX_Size() int {
	return m.Size()
}
func (m *Cork) XXX_DiscardUnknown() {
	xxx_messageInfo_Cork.DiscardUnknown(m)
}

var xxx_messageInfo_Cork proto.InternalMessageInfo

func (m *Cork) GetEncodedContractCall() []byte {
	if m != nil {
		return m.EncodedContractCall
	}
	return nil
}

func (m *Cork) GetTargetContractAddress() string {
	if m != nil {
		return m.TargetContractAddress
	}
	return ""
}

type CellarIDSet struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *CellarIDSet) Reset()         { *m = CellarIDSet{} }
func (m *CellarIDSet) String() string { return proto.CompactTextString(m) }
func (*CellarIDSet) ProtoMessage()    {}
func (*CellarIDSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_79882ab39b78d896, []int{1}
}
func (m *CellarIDSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellarIDSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellarIDSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellarIDSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellarIDSet.Merge(m, src)
}
func (m *CellarIDSet) XXX_Size() int {
	return m.Size()
}
func (m *CellarIDSet) XXX_DiscardUnknown() {
	xxx_messageInfo_CellarIDSet.DiscardUnknown(m)
}

var xxx_messageInfo_CellarIDSet proto.InternalMessageInfo

func (m *CellarIDSet) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type AddManagedCellarIDsProposal struct {
	Title       string       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CellarIds   *CellarIDSet `protobuf:"bytes,3,opt,name=cellar_ids,json=cellarIds,proto3" json:"cellar_ids,omitempty"`
}

func (m *AddManagedCellarIDsProposal) Reset()         { *m = AddManagedCellarIDsProposal{} }
func (m *AddManagedCellarIDsProposal) String() string { return proto.CompactTextString(m) }
func (*AddManagedCellarIDsProposal) ProtoMessage()    {}
func (*AddManagedCellarIDsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_79882ab39b78d896, []int{2}
}
func (m *AddManagedCellarIDsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddManagedCellarIDsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddManagedCellarIDsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddManagedCellarIDsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddManagedCellarIDsProposal.Merge(m, src)
}
func (m *AddManagedCellarIDsProposal) XXX_Size() int {
	return m.Size()
}
func (m *AddManagedCellarIDsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AddManagedCellarIDsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AddManagedCellarIDsProposal proto.InternalMessageInfo

func (m *AddManagedCellarIDsProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AddManagedCellarIDsProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AddManagedCellarIDsProposal) GetCellarIds() *CellarIDSet {
	if m != nil {
		return m.CellarIds
	}
	return nil
}

type RemoveManagedCellarIDsProposal struct {
	Title       string       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CellarIds   *CellarIDSet `protobuf:"bytes,3,opt,name=cellar_ids,json=cellarIds,proto3" json:"cellar_ids,omitempty"`
}

func (m *RemoveManagedCellarIDsProposal) Reset()         { *m = RemoveManagedCellarIDsProposal{} }
func (m *RemoveManagedCellarIDsProposal) String() string { return proto.CompactTextString(m) }
func (*RemoveManagedCellarIDsProposal) ProtoMessage()    {}
func (*RemoveManagedCellarIDsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_79882ab39b78d896, []int{3}
}
func (m *RemoveManagedCellarIDsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveManagedCellarIDsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveManagedCellarIDsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveManagedCellarIDsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveManagedCellarIDsProposal.Merge(m, src)
}
func (m *RemoveManagedCellarIDsProposal) XXX_Size() int {
	return m.Size()
}
func (m *RemoveManagedCellarIDsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveManagedCellarIDsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveManagedCellarIDsProposal proto.InternalMessageInfo

func (m *RemoveManagedCellarIDsProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RemoveManagedCellarIDsProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RemoveManagedCellarIDsProposal) GetCellarIds() *CellarIDSet {
	if m != nil {
		return m.CellarIds
	}
	return nil
}

func init() {
	proto.RegisterType((*Cork)(nil), "cork.v1.Cork")
	proto.RegisterType((*CellarIDSet)(nil), "cork.v1.CellarIDSet")
	proto.RegisterType((*AddManagedCellarIDsProposal)(nil), "cork.v1.AddManagedCellarIDsProposal")
	proto.RegisterType((*RemoveManagedCellarIDsProposal)(nil), "cork.v1.RemoveManagedCellarIDsProposal")
}

func init() { proto.RegisterFile("cork/v1/cork.proto", fileDescriptor_79882ab39b78d896) }

var fileDescriptor_79882ab39b78d896 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x92, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc6, 0x3b, 0xb7, 0xf7, 0x0f, 0x99, 0xde, 0x85, 0x8c, 0x2d, 0x56, 0x85, 0x18, 0xb2, 0xca,
	0x42, 0x32, 0xb4, 0x05, 0xf7, 0x35, 0x22, 0x74, 0x21, 0x48, 0xdc, 0xb9, 0x09, 0xd3, 0x99, 0x43,
	0x8c, 0x9d, 0x64, 0xc2, 0xcc, 0x18, 0xec, 0x2b, 0x08, 0x82, 0x8f, 0xe5, 0xb2, 0x4b, 0x97, 0xd2,
	0xbe, 0x88, 0x34, 0x49, 0xb1, 0x8f, 0xe0, 0x6a, 0xce, 0x39, 0xdf, 0x77, 0x66, 0x7e, 0x0c, 0x1f,
	0x26, 0x5c, 0xe9, 0x05, 0xad, 0x46, 0x74, 0x7b, 0x86, 0xa5, 0x56, 0x56, 0x91, 0x7f, 0x75, 0x5d,
	0x8d, 0x4e, 0x8e, 0xb9, 0x32, 0xb9, 0x32, 0x49, 0x3d, 0xa6, 0x4d, 0xd3, 0x78, 0x7c, 0x8d, 0x7f,
	0x47, 0x4a, 0x2f, 0xc8, 0x18, 0x0f, 0xa0, 0xe0, 0x4a, 0x80, 0x48, 0xb8, 0x2a, 0xac, 0x66, 0xdc,
	0x26, 0x9c, 0x49, 0x39, 0x44, 0x1e, 0x0a, 0xfe, 0xc7, 0x87, 0xad, 0x18, 0xb5, 0x5a, 0xc4, 0xa4,
	0x24, 0x17, 0xf8, 0xc8, 0x32, 0x9d, 0x82, 0xfd, 0x5e, 0x61, 0x42, 0x68, 0x30, 0x66, 0xf8, 0xcb,
	0x43, 0x81, 0x13, 0x0f, 0x1a, 0x79, 0xb7, 0x34, 0x6d, 0x44, 0xff, 0x0c, 0xf7, 0x22, 0x90, 0x92,
	0xe9, 0xd9, 0xd5, 0x1d, 0x58, 0x72, 0x80, 0xbb, 0x99, 0x30, 0x43, 0xe4, 0x75, 0x03, 0x27, 0xde,
	0x96, 0xfe, 0x0b, 0xc2, 0xa7, 0x53, 0x21, 0x6e, 0x58, 0xc1, 0x52, 0x10, 0x3b, 0xaf, 0xb9, 0xd5,
	0xaa, 0x54, 0x86, 0x49, 0xd2, 0xc7, 0x7f, 0x6c, 0x66, 0x25, 0xd4, 0x70, 0x4e, 0xdc, 0x34, 0xc4,
	0xc3, 0x3d, 0x01, 0x86, 0xeb, 0xac, 0xb4, 0x99, 0x2a, 0x5a, 0x84, 0xfd, 0x11, 0x99, 0x60, 0xcc,
	0xeb, 0xcb, 0x92, 0xed, 0x83, 0x5d, 0x0f, 0x05, 0xbd, 0x71, 0x3f, 0x6c, 0x7f, 0x29, 0xdc, 0x63,
	0x8a, 0x9d, 0xc6, 0x37, 0x13, 0xc6, 0x7f, 0x45, 0xd8, 0x8d, 0x21, 0x57, 0x15, 0xfc, 0x08, 0x9e,
	0xcb, 0xeb, 0xf7, 0xb5, 0x8b, 0x56, 0x6b, 0x17, 0x7d, 0xae, 0x5d, 0xf4, 0xb6, 0x71, 0x3b, 0xab,
	0x8d, 0xdb, 0xf9, 0xd8, 0xb8, 0x9d, 0xfb, 0xf3, 0x34, 0xb3, 0x0f, 0x4f, 0xf3, 0x90, 0xab, 0x9c,
	0x96, 0x90, 0xa6, 0xcb, 0xc7, 0x8a, 0x1a, 0x95, 0xe7, 0x20, 0x33, 0xd0, 0xb4, 0x9a, 0xd0, 0xe7,
	0x3a, 0x1d, 0xd4, 0x2e, 0x4b, 0x30, 0xf3, 0xbf, 0x75, 0x00, 0x26, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x38, 0xce, 0xb6, 0x1a, 0x3a, 0x02, 0x00, 0x00,
}

func (m *Cork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetContractAddress) > 0 {
		i -= len(m.TargetContractAddress)
		copy(dAtA[i:], m.TargetContractAddress)
		i = encodeVarintCork(dAtA, i, uint64(len(m.TargetContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncodedContractCall) > 0 {
		i -= len(m.EncodedContractCall)
		copy(dAtA[i:], m.EncodedContractCall)
		i = encodeVarintCork(dAtA, i, uint64(len(m.EncodedContractCall)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CellarIDSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellarIDSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellarIDSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintCork(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddManagedCellarIDsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddManagedCellarIDsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddManagedCellarIDsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CellarIds != nil {
		{
			size, err := m.CellarIds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCork(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCork(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveManagedCellarIDsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveManagedCellarIDsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveManagedCellarIDsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CellarIds != nil {
		{
			size, err := m.CellarIds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCork(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCork(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCork(dAtA []byte, offset int, v uint64) int {
	offset -= sovCork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Cork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncodedContractCall)
	if l > 0 {
		n += 1 + l + sovCork(uint64(l))
	}
	l = len(m.TargetContractAddress)
	if l > 0 {
		n += 1 + l + sovCork(uint64(l))
	}
	return n
}

func (m *CellarIDSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovCork(uint64(l))
		}
	}
	return n
}

func (m *AddManagedCellarIDsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCork(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCork(uint64(l))
	}
	if m.CellarIds != nil {
		l = m.CellarIds.Size()
		n += 1 + l + sovCork(uint64(l))
	}
	return n
}

func (m *RemoveManagedCellarIDsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCork(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCork(uint64(l))
	}
	if m.CellarIds != nil {
		l = m.CellarIds.Size()
		n += 1 + l + sovCork(uint64(l))
	}
	return n
}

func sovCork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCork(x uint64) (n int) {
	return sovCork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Cork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedContractCall", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedContractCall = append(m.EncodedContractCall[:0], dAtA[iNdEx:postIndex]...)
			if m.EncodedContractCall == nil {
				m.EncodedContractCall = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellarIDSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellarIDSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellarIDSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddManagedCellarIDsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddManagedCellarIDsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddManagedCellarIDsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CellarIds == nil {
				m.CellarIds = &CellarIDSet{}
			}
			if err := m.CellarIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveManagedCellarIDsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveManagedCellarIDsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveManagedCellarIDsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CellarIds == nil {
				m.CellarIds = &CellarIDSet{}
			}
			if err := m.CellarIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCork = fmt.Errorf("proto: unexpected end of group")
)
